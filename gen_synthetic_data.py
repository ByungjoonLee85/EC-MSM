from A import *

# Data for example : ellipsoidal adjustment and multilayer formulation
def two_classed_but_elongated_data(training_data=True):
	# Function to generate noisy ellipse points
    def generate_ellipse_points(a, b, center_x, center_y, num_points, noise_level):
        r = np.random.rand(num_points)  # random radius
        theta = 2 * np.pi * np.random.rand(num_points)  # random angle
        x = a * r * np.cos(theta) + center_x + noise_level * np.random.randn(num_points)
        y = b * r * np.sin(theta) + center_y + noise_level * np.random.randn(num_points)
        return x, y
	
    num_points = 40
    noise_level = 0.05
    if training_data==True:
        x1, y1 = generate_ellipse_points(0.7, 1, 1, 1, num_points, noise_level)    
        x2, y2 = generate_ellipse_points(0.25, 1, 2, 2, num_points, noise_level)
        x3, y3 = generate_ellipse_points(1, 1, 5, 1, num_points, noise_level)    
        x4, y4 = generate_ellipse_points(0.5, 0.5, 6, 0, num_points, noise_level)
    else:
        num_points = 20
        x1, y1 = generate_ellipse_points(0.2, 0.2, 2.8, 1.5, num_points, noise_level)    
        x2, y2 = generate_ellipse_points(0.2, 0.2, 2.8, 1.5, num_points, noise_level)
        x3, y3 = generate_ellipse_points(0.2, 0.2, 2.8, 1.5, num_points, noise_level)    
        x4, y4 = generate_ellipse_points(0.2, 0.2, 2.8, 1.5, num_points, noise_level)
    
    X = np.array([np.concatenate([x1, x2, x3, x4]), np.concatenate([y1, y2, y3, y4])]).T
    if training_data == True:
        t = np.concatenate([np.zeros(2*num_points,dtype=np.intp), np.ones(2*num_points,dtype=np.intp)])
    else:
        t = np.zeros(4*num_points,dtype=np.intp)
	
    return X,t

# Fully seperable data
def gen_data_for_fully_seperable_data():
	X = np.array([[2.17079566162529 ,	0                    ],
                  [2.11444940654621,	0.00501420977750202  ],
                  [3.24877287825012,	0.488288224397989    ],
                  [3.56358214710934,	0.734577116798567    ],
                  [3.33807550611291,	0.124429268244606    ],
                  [2.65613405323900,	0.583390244833827    ],
                  [3.75798846447595,	0.976274023542208    ],
                  [2.93938728654581,	0.498881120402078    ],
                  [3.66697783582051,	1.46741300599311     ],
                  [2.12382517724921,	1.20696559809376     ],
                  [2.33343334028392,	1.01456648756618     ],
                  [3.18741150032707,	0.686996117590925    ],
                  [3.32325768691046,	2.08054977982460     ],
                  [3.06193595898314,	2.63975919841345     ],
                  [2.37269975121289,	2.26151704556304     ],
                  [2.17615832083469,	1.32557617703578     ],
                  [2.89408004323750,	3.18924332315205     ],
                  [2.74132824255167,	0.900589557087127    ],
                  [2.22501494397502,	1.93992936961874     ],
                  [2.16260500336002,	3.56752887695910     ],
                  [2.19063666821428,	1.02269089075111     ],
                  [2.39115321588886,	0.972140509395067    ],
                  [2.28554087960531,	3.65431714859854     ],
                  [2.12650691972358,	0.272639103910002    ],
                  [2.05441749923312,	1.19624506989766     ],
                  [1.99092408886486,	2.36603628064330     ],
                  [1.88918739117649,	0.810638895981648    ],
                  [1.77336135915613,	2.51764329916032     ],
                  [1.81911923351123,	3.12578704539752     ],
                  [1.76219044844922,	1.93424250105009     ],
                  [1.69539348900508,	2.46007200520553     ],
                  [1.78438914023816,	2.93660999536658     ],
                  [1.40017674022639,	0.836405773100138    ],
                  [1.09633547363646,	2.08136713706962     ],
                  [0.993498552171786,	0.374531144089814    ],
                  [1.09498058486956,	1.64170650187907     ],
                  [1.65880248654015,	2.53279098200743     ],
                  [1.03247274715197,	2.62496697213596     ],
                  [1.80350258328801,	1.32881175420900     ],
                  [1.80584357710342,	0.686431239610076    ],
                  [1.68551558090875,	1.48007152043867     ],
                  [1.74992855171255,	1.88478262731893     ],
                  [0.959984991479866,	0.934487837693844    ],
                  [1.86558547053155,	1.56233245275816     ],
                  [0.454532234267429,	0.269893488205039    ],
                  [0.612759353087758,	0.125297719060917    ],
                  [0.193780982580926,	0.262041131193626    ],
                  [1.02709897963160,	0.250538728033855    ],
                  [0.696164924040149,	0.159981481827421    ],
                  [0.220649322966398,	0.0395298777352821   ],
                  [0.923491100666590,	-0.0880568399417048  ],
                  [1.43814536455435,	-0.0349318918475612  ],
                  [0.072603186298472,	-0.25412225245140    ],
                  [1.92893893430758,    -0.260125760816802   ],
                  [1.37394124893754,	-0.345400484875058   ],
                  [0.171332555407523,	-0.144416132254793   ],
                  [1.33118104943755,	-0.952334477748715   ],
                  [1.45043371957430,	-0.518212985461862   ],
                  [1.79251835915026,	-0.318935349439994   ],
                  [0.491410471009997,	-0.00149401580684670 ],
                  [1.78701387430771,	-0.701228222071928   ],
                  [1.50496868423816,	-1.46905446633461    ],
                  [0.740880786520219,	-2.48274766290301    ],
                  [1.34559926924814,	-0.127732032840163   ],
                  [1.25475096026531,	-2.87977291656138    ],
                  [1.35398189814780,	-0.436180304183874   ],
                  [1.30174607337259,	-2.88812179578021    ],
                  [1.97394897182656,	-2.86885872170665    ],
                  [1.59211019330877,	-3.38644257731221    ],
                  [1.97901999888725,	-0.519008278575492   ],
                  [1.55917646153875,	-1.94592914579813    ],
                  [1.86073711572453,	-1.58549740381692    ],
                  [1.75900093364540,	-0.687221788802736   ],
                  [1.96099799484615,	-2.29349812455148    ],
                  [1.98154816163934,	-2.42456650604589    ],
                  [2.08923292466001,	-0.856811384513753   ],
                  [2.01059331493221,	-2.06691469595667    ],
                  [2.01874624429928,	-3.89663141801010    ],
                  [2.00972177155285,	-1.90442088932177    ],
                  [2.40468971242659,	-2.65414394752795    ],
                  [2.42728454601449,	-1.53731527888256    ],
                  [2.09473957654185,	-0.126536141955432   ],
                  [2.75208729514009,	-1.03246943972822    ],
                  [2.65149312943586,	-2.72402170085001    ],
                  [2.08145567946796,	-1.12900875540102    ],
                  [2.08736808185126,	-0.258661503976702   ],
                  [2.18456458644008,	-1.50181800934667    ],
                  [3.14189500080281,	-1.01257614187728    ],
                  [2.14156265049062,	-1.90131305343526    ],
                  [2.38309732679665,	-1.24449041557856    ],
                  [2.40993933451163,	-1.73982729939753    ],
                  [2.18319765047010,	-1.58871819575147    ],
                  [3.55005897284424,	-0.325735515257594   ],
                  [3.29637254752086,	-0.183888855709296   ],
                  [3.39421441736614,	-1.02471344098358    ],
                  [3.25936054631939,	-0.640826813173893   ],
                  [3.01388176817134,	-0.0122027702602100  ],
                  [2.64752456290457,	-0.453684378414677   ],
                  [3.32088765438236,	-0.130748424863101   ],
                  [2.23513096924351,	-5.33477639088995e-16],
                  [-3.18067337525442,	0                    ],
                  [-2.72328435886649,	0.0595552566291720   ],
                  [-2.45460366140583,	0.103227937120579    ],
                  [-3.87215144991980,	0.000256970787384767 ],
                  [-4.75419178341110,	0.000776222470542853 ],
                  [-2.90830452423993,	0.0272931961471081   ],
                  [-4.07537524846422,	0.0969025676064101   ],
                  [-2.72530357834351,	0.00979875264386997  ],
                  [-4.02550945654224,	0.206188654733177    ],
                  [-2.90978293441844,	0.184393643596553    ],
                  [-4.57356439459129,	0.320973039483055    ],
                  [-4.70234609054255,	0.595330010759148    ],
                  [-3.08959490550306,	0.205988203354597    ],
                  [-4.91027568944430,	0.248354286386343    ],
                  [-3.70096058241979,	0.667082446337650    ],
                  [-3.72310986931142,	0.277345444144242    ],
                  [-4.30853467204179,	0.117364418866535    ],
                  [-4.46183919941463,	0.447601097150720    ],
                  [-3.77910677566622,	0.779242140408360    ],
                  [-4.57281423489238,	0.359005743815785    ],
                  [-4.60789860860163,	0.664316825381097    ],
                  [-4.88909341805915,	0.610204543775537    ],
                  [-4.83015422214477,	0.443545746270635    ],
                  [-4.89556982350518,	0.470699728316854    ],
                  [-4.87231383411748,	0.948630658329271    ],
                  [-5.01175783008358,	0.0834870517570027   ],
                  [-5.07386389582216,	0.278948795351686    ],
                  [-5.17456433756899,	0.442457419456993    ],
                  [-5.43501605650135,	0.575116190524122    ],
                  [-5.11482697323430,	0.845900782395348    ],
                  [-5.85494460112269,	0.443300375675900    ],
                  [-5.09638062615002,	0.403454809384163    ],
                  [-5.61512707338815,	0.668577060687416    ],
                  [-5.04558353549173,	0.405222350086118    ],
                  [-6.25163866154623,	0.716698902535890    ],
                  [-6.27185786623055,	0.371232457602435    ],
                  [-5.42142694088961,	0.376442254126934    ],
                  [-6.43080818878563,	0.347388986353273    ],
                  [-6.24599126894812,	0.153002665588433    ],
                  [-7.00603635204005,	0.0528848812548924   ],
                  [-6.38023194437862,	0.0382103726416890   ],
                  [-7.32112053873482,	0.456346338087876    ],
                  [-6.11864661999573,	0.106843617583638    ],
                  [-5.98425323850876,	0.345440049354601    ],
                  [-6.37849388521377,	0.243427738520477    ],
                  [-5.73678162740878,	0.245899836174384    ],
                  [-7.71901814610117,	0.206651721899308    ],
                  [-6.38268148971826,	0.0220711010130152   ],
                  [-5.75857305002774,	0.0374425892264809   ],
                  [-6.29300404119884,	0.0311112322518767   ],
                  [-7.10652895150141,	-0.0204579819764155  ],
                  [-6.20152426157959,	-0.0852091668140659  ],
                  [-5.53866789558343,	-0.0761930772398088  ],
                  [-7.50563853123005,	-0.00310485290349449 ],
                  [-6.68161091035956,	-0.175485672043885   ],
                  [-6.05314767609945,	-0.0790392692131678  ],
                  [-5.60928874778330,	-0.211464381087668   ],
                  [-5.58394920460756,	-0.332210544733060   ],
                  [-6.34420032190718,	-0.312015759195827   ],
                  [-6.07100041687892,	-0.333638996654077   ],
                  [-6.74811288244175,	-0.267931641307525   ],
                  [-5.15751081940128,	-0.162806916156850   ],
                  [-6.78314938143957,	-0.305717543890201   ],
                  [-6.33568060819245,	-0.00769160767859242 ],
                  [-5.24827245627165,	-0.484476876846188   ],
                  [-6.42645858536095,	-0.797581263181192   ],
                  [-5.29975118700061,	-0.0826591140968638  ],
                  [-5.80909814527427,	-0.0318889232121335  ],
                  [-5.62940834740093,	-0.817422760517559   ],
                  [-5.15927361925760,	-0.233359792153852   ],
                  [-5.00451918386843,	-0.00859270706289964 ],
                  [-5.47401590735819,	-0.797645955163352   ],
                  [-5.32652185214570,	-0.139069354868159   ],
                  [-5.10010918402519,	-0.877099063196942   ],
                  [-5.00270418762400,	-0.0953647807926012  ],
                  [-4.91638710733627,	-0.352160770236321   ],
                  [-4.94209083861083,	-0.589764185869646   ],
                  [-4.62043425969189,	-0.576291414494105   ],
                  [-4.62210833244107,	-0.648860862393171   ],
                  [-4.77458017009600,	-0.618802544683229   ],
                  [-4.01814524635709,	-0.404830786959431   ],
                  [-4.05510382874093,	-0.127129038907729   ],
                  [-3.74324312820283,	-0.662790793880123   ],
                  [-4.89118355620729,	-0.205452387137014   ],
                  [-4.68062960624883,	-0.529848521877584   ],
                  [-3.60571061544607,	-0.665447845892137   ],
                  [-3.58181724591657,	-0.0619778484852969  ],
                  [-3.31299136032315,	-0.670818327787273   ],
                  [-3.84655902432458,	-0.0202220567789367  ],
                  [-3.97208017920703,	-0.495317981927084   ],
                  [-3.45738381301557,	-0.451820747713648   ],
                  [-2.75655279745915,	-0.0242405544243520  ],
                  [-3.18295846548744,	-0.234619115160926   ],
                  [-3.54174180712352,	-0.350540818711113   ],
                  [-4.14831232796421,	-0.100310349690803   ],
                  [-2.95578213348916,	-0.202542514501054   ],
                  [-3.87585598903687,	-0.113815462788396   ],
                  [-3.31064640277693,	-0.0999599920719711  ],
                  [-2.34177978811939,	-0.0506874474533801  ],
                  [-2.47115213301413,	-1.21398663031690e-17]])

	t = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])	

	return X,t


# Two concentrated circle
def gen_data_for_validation_train():
    X = np.array([[ 1.00000000e+00,  0.00000000e+00],
                  [ 9.51056516e-01,  1.54508497e-01],
                  [ 8.09016994e-01,  2.93892626e-01],
                  [ 5.87785252e-01,  4.04508497e-01],
                  [ 3.09016994e-01,  4.75528258e-01],
                  [ 6.12323400e-17,  5.00000000e-01],
                  [-3.09016994e-01,  4.75528258e-01],
                  [-5.87785252e-01,  4.04508497e-01],
                  [-8.09016994e-01,  2.93892626e-01],
                  [-9.51056516e-01,  1.54508497e-01],
                  [-1.00000000e+00,  6.12323400e-17],
                  [-9.51056516e-01, -1.54508497e-01],
                  [-8.09016994e-01, -2.93892626e-01],
                  [-5.87785252e-01, -4.04508497e-01],
                  [-3.09016994e-01, -4.75528258e-01],
                  [-1.83697020e-16, -5.00000000e-01],
                  [ 3.09016994e-01, -4.75528258e-01],
                  [ 5.87785252e-01, -4.04508497e-01],
                  [ 8.09016994e-01, -2.93892626e-01],
                  [ 9.51056516e-01, -1.54508497e-01],
                  [ 4.00000000e-01,  0.00000000e+00],
                  [ 3.80422607e-01,  6.18033989e-02],
                  [ 3.23606798e-01,  1.17557050e-01],
                  [ 2.35114101e-01,  1.61803399e-01],
                  [ 1.23606798e-01,  1.90211303e-01],
                  [ 2.44929360e-17,  2.00000000e-01],
                  [-1.23606798e-01,  1.90211303e-01],
                  [-2.35114101e-01,  1.61803399e-01],
                  [-3.23606798e-01,  1.17557050e-01],
                  [-3.80422607e-01,  6.18033989e-02],
                  [-4.00000000e-01,  2.44929360e-17],
                  [-3.80422607e-01, -6.18033989e-02],
                  [-3.23606798e-01, -1.17557050e-01],
                  [-2.35114101e-01, -1.61803399e-01],
                  [-1.23606798e-01, -1.90211303e-01],
                  [-7.34788079e-17, -2.00000000e-01],
                  [ 1.23606798e-01, -1.90211303e-01],
                  [ 2.35114101e-01, -1.61803399e-01],
                  [ 3.23606798e-01, -1.17557050e-01],
                  [ 3.80422607e-01, -6.18033989e-02]])
    t = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])
    
    return X,t

def gen_data_for_validation_test():
    X = np.array([[ 1.00000000e+00,  0.00000000e+00],
                  [ 9.51056516e-01,  1.54508497e-01],
                  [ 8.09016994e-01,  2.93892626e-01],
                  [ 5.87785252e-01,  4.04508497e-01],
                  [ 3.09016994e-01,  4.75528258e-01],
                  [ 6.12323400e-17,  5.00000000e-01],
                  [-3.09016994e-01,  4.75528258e-01],
                  [-5.87785252e-01,  4.04508497e-01],
                  [-8.09016994e-01,  2.93892626e-01],
                  [-9.51056516e-01,  1.54508497e-01],
                  [-1.00000000e+00,  6.12323400e-17],
                  [-9.51056516e-01, -1.54508497e-01],
                  [-8.09016994e-01, -2.93892626e-01],
                  [-5.87785252e-01, -4.04508497e-01],
                  [-3.09016994e-01, -4.75528258e-01],
                  [-1.83697020e-16, -5.00000000e-01],
                  [ 3.09016994e-01, -4.75528258e-01],
                  [ 5.87785252e-01, -4.04508497e-01],
                  [ 8.09016994e-01, -2.93892626e-01],
                  [ 9.51056516e-01, -1.54508497e-01],
                  [ 4.00000000e-01,  0.00000000e+00],
                  [ 3.80422607e-01,  6.18033989e-02],
                  [ 3.23606798e-01,  1.17557050e-01],
                  [ 2.35114101e-01,  1.61803399e-01],
                  [ 1.23606798e-01,  1.90211303e-01],
                  [ 2.44929360e-17,  2.00000000e-01],
                  [-1.23606798e-01,  1.90211303e-01],
                  [-2.35114101e-01,  1.61803399e-01],
                  [-3.23606798e-01,  1.17557050e-01],
                  [-3.80422607e-01,  6.18033989e-02],
                  [-4.00000000e-01,  2.44929360e-17],
                  [-3.80422607e-01, -6.18033989e-02],
                  [-3.23606798e-01, -1.17557050e-01],
                  [-2.35114101e-01, -1.61803399e-01],
                  [-1.23606798e-01, -1.90211303e-01],
                  [-7.34788079e-17, -2.00000000e-01],
                  [ 1.23606798e-01, -1.90211303e-01],
                  [ 2.35114101e-01, -1.61803399e-01],
                  [ 3.23606798e-01, -1.17557050e-01],
                  [ 3.80422607e-01, -6.18033989e-02]])
    t = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])
    
    return X,t
    
def gen_two_concentric_ellipes(n_samples=100, shuffle=False, noise=None, random_state=None, factor=.8):
	if factor >= 1 or factor < 0:
		raise ValueError("'factor' must be a number between 0 and 1!")
		
	n_samples_out = n_samples//2
	n_samples_in  = n_samples - n_samples_out
	
	generator = check_random_state(random_state)
	
	theta_out = np.linspace(0,2*np.pi,n_samples_out,endpoint=False)
	theta_in  = np.linspace(0,2*np.pi,n_samples_in ,endpoint=False)
	x_outer_circle = np.cos(theta_out)
	y_outer_circle = np.sin(theta_out)*0.5
	x_inner_circle = np.cos(theta_in )*factor
	y_inner_circle = np.sin(theta_in )*factor*0.5	
	
	# Label : outer = 0, inner = 1
	X = np.array([np.concatenate([x_outer_circle, x_inner_circle]), np.concatenate([y_outer_circle, y_inner_circle])]).T
	t = np.concatenate([np.zeros(n_samples_out,dtype=np.intp), np.ones(n_samples_in,dtype=np.intp)])
	
	if shuffle:
		X, t = util_shuffle(X, t, random_state=generator)
		
	if noise is not None:
		X += generator.normal(scale=noise, size=X.shape)
	
	return X, t
	
def gen_n_moons(n_samples=100,n_moons=2,noise=None,shuffle=True,random_state=None):
	n_samples_each = n_samples//n_moons

	generator = check_random_state(random_state)

	X = np.empty((0,2))
	t = [] 

	for i in range(n_moons):
		if   i == 0:
			x_arc = 	np.cos(np.linspace(0,np.pi,n_samples_each))-i*0.3
			y_arc = 	np.sin(np.linspace(0,np.pi,n_samples_each))
		elif i%2==0:
			x_arc = i + np.cos(np.linspace(0,np.pi,n_samples_each))+i*0.3
			y_arc =     np.sin(np.linspace(0,np.pi,n_samples_each))
		else:
			x_arc = i - np.cos(np.linspace(0,np.pi,n_samples_each))+i*0.3
			y_arc = 1 - np.sin(np.linspace(0,np.pi,n_samples_each))-  0.5
		
		X = np.vstack([X, np.array([x_arc,y_arc]).T])
		t = np.hstack([t, i*np.ones(n_samples_each,dtype=np.intp)])
	
	if shuffle:
		for n in range(n_moons):
			idx1 =  n   *n_samples_each
			idx2 = (n+1)*n_samples_each-1

			X[idx1:idx2:1,:], t[idx1:idx2:1] = util_shuffle(X[idx1:idx2:1,:],t[idx1:idx2:1],random_state=generator)
	
	if noise is not None:
		X += generator.normal(scale=noise,size=X.shape)
		
	return X, t

def gen_two_moons_and_two_ellipses(n_samples=100,noise=None,shuffle=True,random_state=None):
	n_samples_each = n_samples//2

	generator=check_random_state(random_state)

	# Parameters for half-moons and circles
	r_moon = 1.0
	c1_moon = 0.0
	c2_moon = 0.0
	c3_moon = c1_moon+r_moon
	c4_moon = c2_moon+r_moon
	r_inner_circle = 0.4
	r_outer_circle = 1.0

	t_moons = []
	### Create two moons
	range0 = np.linspace(0,np.pi,n_samples_each)
	range1 = np.linspace(0,np.pi,n_samples_each)

	# First moon
	x1 = np.empty((0,1))
	x2 = np.empty((0,1))

	for x in range0:
		x1 = np.vstack((x1,np.cos(x)))
		x2 = np.vstack((x2,np.sin(x)))

	X_moon0 = np.hstack((x1,x2))
	t_moons = np.hstack([t_moons, np.zeros(n_samples_each,dtype=np.intp)])

	# Second moon
	x1 = np.empty((0,1))
	x2 = np.empty((0,1))

	for x in range1:
		x1 = np.vstack((x1,1.3-np.cos(x)))
		x2 = np.vstack((x2,0.5-np.sin(x)))

	X_moon1 = np.hstack((x1,x2))
	t_moons = np.hstack([t_moons, np.ones(n_samples_each,dtype=np.intp)])
		
	# Combine two moons
	X_moons = np.vstack((X_moon0,X_moon1))

	### Create two circles corresponding to each moon (t_circles = t_moons)
	range2 = np.linspace(0,2*np.pi,n_samples_each)

	# inner circle
	x3 = np.empty((0,1))
	x4 = np.empty((0,1))
	for x in range2:
		x3 = np.vstack((x3,r_inner_circle*np.cos(x)    ))
		x4 = np.vstack((x4,r_inner_circle*np.sin(x)*0.5))
	
	X_circle0 = np.hstack((x3,x4))

	# inner circle
	x3 = np.empty((0,1))
	x4 = np.empty((0,1))
	for x in range2:
		x3 = np.vstack((x3,r_outer_circle*np.cos(x)    ))
		x4 = np.vstack((x4,r_outer_circle*np.sin(x)*0.5))
	
	X_circle1 = np.hstack((x3,x4))
		
	# Combine two circles
	X_circles = np.vstack((X_circle0,X_circle1))

	X = np.hstack((X_moons,X_circles))
	t = t_moons

	if shuffle:
		for n in range(4):
			idx1 =  n   *n_samples_each
			idx2 = (n+1)*n_samples_each-1

			X[idx1:idx2:1,:], t[idx1:idx2:1] = util_shuffle(X[idx1:idx2:1,:],t[idx1:idx2:1],random_state=generator)

	if noise is not None:
		X += generator.normal(scale=noise,size=X.shape)

	return X, t	